{"version":3,"file":"static/js/622.d94ceb8d.chunk.js","mappings":"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","sources":["components/FormSearch/FormSearch.jsx","components/FoundMovies/FoundMovies.jsx","pages/Movies/Movies.jsx","services/fetch.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React from 'react';\n\nconst FormSearch = ({ value, onChange, onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        placeholder=\"Find movie...\"\n      />\n      <button>Find</button>\n    </form>\n  );\n};\n\nexport default FormSearch;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nconst fallbackImage = \"https://i.pinimg.com/564x/71/47/ad/7147ada1406770e3f8190a77cc577c8a.jpg\";\n\n\nconst FoundMovies = ({ searchResults, state }) => {\n  return (\n    <ul>\n      {searchResults.map((movie) => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{state}}>\n            <img\n              src={movie.poster_path ? `http://image.tmdb.org/t/p/w300${movie.poster_path}` : fallbackImage}\n              alt={movie.title}\n            />\n            <p>{movie.title}</p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default FoundMovies;\n","import { useEffect, useState } from \"react\";\nimport { useLocation, useSearchParams } from \"react-router-dom\";\nimport APIservices from \"services/fetch\";\nimport FormSearch from \"components/FormSearch/FormSearch\";\nimport FoundMovies from \"components/FoundMovies/FoundMovies\";\n\nconst Movies = () => {\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieKeyWord = searchParams.get('movieKeyWord') ?? '';\n  const location = useLocation();\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await APIservices.fetchMoviesByName(movieKeyWord);\n      setSearchResults(response.results);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData(movieKeyWord);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const fetchData = async (keyword) => {\n    try {\n      const response = await APIservices.fetchMoviesByName(keyword);\n      setSearchResults(response.results);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setSearchParams({ movieKeyWord: e.target.value });\n  };\n\n  \n  return (\n    <div>\n      <h1>Search</h1>\n      <FormSearch\n        value={movieKeyWord}\n        onChange={handleInputChange}\n        onSubmit={handleSearch}\n      />\n      <FoundMovies searchResults={searchResults} state={{ from: location } } />\n    </div>\n  );\n};\n\nexport default Movies;\n\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '15da45b97ad657540cf457ee5b3df568';\n\nasync function fetchTrendingMovies() {\n  const url = `${BASE_URL}/trending/movie/day?language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data.results;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function fetchMoviesByName(query) {\n  const url = `${BASE_URL}/search/movie?query=${query}&include_adult=false&language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function fetchMovieDetails(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}?language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function fetchMovieCredits(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function fetchMovieReviews(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/reviews?language=en-US&&page=1&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nconst APIservices = {\n  fetchTrendingMovies,\n  fetchMoviesByName,\n  fetchMovieDetails,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default APIservices;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["value","onChange","onSubmit","type","placeholder","searchResults","state","map","movie","to","id","src","poster_path","alt","title","useState","setSearchResults","useSearchParams","searchParams","setSearchParams","movieKeyWord","get","location","useLocation","handleSearch","e","preventDefault","APIservices","response","results","console","error","useEffect","fetchData","keyword","target","from","BASE_URL","API_KEY","fetchTrendingMovies","url","fetch","json","data","ok","Error","status_code","status_message","message","fetchMoviesByName","query","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}