{"version":3,"file":"static/js/278.ed7359d1.chunk.js","mappings":"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","sources":["pages/Movies/Movies.jsx","services/fetch.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// import { useEffect, useState } from 'react';\n// import { Link, useNavigate, useLocation } from 'react-router-dom';\n// import APIservices from \"services/fetch\";\n\n// const Movies = () => {\n//   const [searchKeyword, setSearchKeyword] = useState('');\n//   const [searchResults, setSearchResults] = useState([]);\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//     const handleSearch = async () => {\n//     try {\n//       navigate(`/movies?movieKeyWord=${searchKeyword}`);\n//       setSearchResults([]);\n\n//       const response = await APIservices.fetchMoviesByName(searchKeyword);\n//       setSearchResults(response.results);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//     };\n  \n  \n//   const handleInputChange = (event) => {\n//     setSearchKeyword(event.target.value);\n//   };\n\n//   useEffect(() => {\n//     const params = new URLSearchParams(location.search);\n//     const movieKeyWordParam = params.get('movieKeyWord');\n\n//     if (movieKeyWordParam) {\n//       setSearchKeyword(movieKeyWordParam);\n//       handleSearch();\n//     }\n//   }, [location.search]);\n\n//   useEffect(() => {\n//     handleSearch();\n//   }, [searchKeyword]);\n\n//   return (\n//     <div>\n//       <h1>Movies By Search</h1>\n//       <input\n//         type=\"text\"\n//         value={searchKeyword}\n//         onChange={handleInputChange}\n//         placeholder=\"Search movies...\"\n//       />\n//       <button onClick={handleSearch}>Search</button>\n//       <ul>\n//         {searchResults.map(movie => (\n//           <li key={movie.id}>\n//             <Link to={`/movies/${movie.id}`}>\n//               <img src={`http://image.tmdb.org/t/p/w300${movie.poster_path}`} alt={movie.title} />\n//               <p>{movie.title}</p>\n//             </Link>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default Movies;\n\nimport { useState } from \"react\";\nimport { useSearchParams, Link } from \"react-router-dom\";\nimport APIservices from \"services/fetch\";\n\nconst Movies = () => {\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const handleSearch = async () => {\n    searchParams.set(\"movieKeyWord\", searchKeyword);\n    setSearchParams(searchParams);\n    \n    try {\n      const response = await APIservices.fetchMoviesByName(searchKeyword);\n      setSearchResults(response.results);\n    } catch (error) {\n      console.error(\"ASHIBKA\", error);\n    }\n  };\n\n  const handleInputChange = (event) => {\n    setSearchKeyword(event.target.value);\n  };\n\n  return (\n    <div>\n      <h1>Search</h1>\n      <input\n        type=\"text\"\n        value={searchKeyword}\n        onChange={handleInputChange}\n        placeholder=\"Find movie...\"\n      />\n      <button onClick={handleSearch}>Find</button>\n      <ul>\n        {searchResults.map((movie) => (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`}>\n              <img\n                src={`http://image.tmdb.org/t/p/w300${movie.poster_path}`}\n                alt={movie.title}\n              />\n              <p>{movie.title}</p>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '15da45b97ad657540cf457ee5b3df568';\n\nasync function fetchTrendingMovies() {\n  const url = `${BASE_URL}/trending/movie/day?language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data.results;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function fetchMoviesByName(query) {\n  const url = `${BASE_URL}/search/movie?query=${query}&include_adult=false&language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function fetchMovieDetails(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}?language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function fetchMovieCredits(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function fetchMovieReviews(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/reviews?language=en-US&&page=1&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nconst APIservices = {\n  fetchTrendingMovies,\n  fetchMoviesByName,\n  fetchMovieDetails,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default APIservices;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","searchKeyword","setSearchKeyword","searchResults","setSearchResults","useSearchParams","searchParams","setSearchParams","handleSearch","set","APIservices","response","results","console","error","type","value","onChange","event","target","placeholder","onClick","map","movie","to","id","src","poster_path","alt","title","BASE_URL","API_KEY","fetchTrendingMovies","url","fetch","json","data","ok","Error","status_code","status_message","message","fetchMoviesByName","query","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}