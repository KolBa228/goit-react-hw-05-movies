{"version":3,"file":"static/js/186.c8cc4d91.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.jsx","services/fetch.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport APIservices from 'services/fetch';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [status, setStatus] = useState('pending');\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const getReviewsData = async () => {\n      try {\n        const reviewsData = await APIservices.fetchMovieReviews(movieId);\n        setReviews(reviewsData.results);\n        setStatus('resolved');\n      } catch (error) {\n        setStatus('rejected');\n        console.error(error);\n      }\n    };\n\n    getReviewsData();\n  }, [movieId]);\n\n  if (status === 'pending') {\n    return <div>Loading...</div>;\n  }\n\n  if (status === 'rejected') {\n    return <div>Oooops, something went wrong.</div>;\n  }\n\n  if (status === 'resolved') {\n    return (\n      <div>\n        <h2>Reviews</h2>\n        {reviews.length === 0 ? (\n          <p>We don't have any reviews for this movie.</p>\n        ) : (\n          <ul>\n            {reviews.map(({ id, author, content }) => (\n              <li key={id}>\n                <h3>{author}</h3>\n                <p>{content}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    );\n  }\n};\n\nexport default Reviews;\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '15da45b97ad657540cf457ee5b3df568';\n\nasync function fetchTrendingMovies() {\n  const url = `${BASE_URL}/trending/movie/day?language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data.results;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function fetchMoviesByName(query) {\n  const url = `${BASE_URL}/search/movie?query=${query}&include_adult=false&language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function fetchMovieDetails(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}?language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function fetchMovieCredits(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function fetchMovieReviews(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/reviews?language=en-US&&page=1&api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `Status code: ${data.status_code}. Status message: ${data.status_message}`\n      );\n    }\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nconst APIservices = {\n  fetchTrendingMovies,\n  fetchMoviesByName,\n  fetchMovieDetails,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};\n\nexport default APIservices;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useParams","useState","status","setStatus","reviews","setReviews","useEffect","getReviewsData","APIservices","reviewsData","results","console","error","length","map","id","author","content","BASE_URL","API_KEY","fetchTrendingMovies","url","fetch","response","json","data","ok","Error","status_code","status_message","message","fetchMoviesByName","query","fetchMovieDetails","fetchMovieCredits","fetchMovieReviews","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}